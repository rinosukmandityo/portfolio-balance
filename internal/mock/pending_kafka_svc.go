// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/rinosukmandityo/portfolio-balance"
)

// Ensure, that PendingKafkaServiceMock does implement portfolio.PendingKafkaService.
// If this is not the case, regenerate this file with moq.
var _ portfolio.PendingKafkaService = &PendingKafkaServiceMock{}

// PendingKafkaServiceMock is a mock implementation of portfolio.PendingKafkaService.
//
//	func TestSomethingThatUsesPendingKafkaService(t *testing.T) {
//
//		// make and configure a mocked portfolio.PendingKafkaService
//		mockedPendingKafkaService := &PendingKafkaServiceMock{
//			RunKafkaHandlerFunc: func(ctx context.Context, kafkaReader portfolio.KafkaReader, lastOffset int64) error {
//				panic("mock out the RunKafkaHandler method")
//			},
//		}
//
//		// use mockedPendingKafkaService in code that requires portfolio.PendingKafkaService
//		// and then make assertions.
//
//	}
type PendingKafkaServiceMock struct {
	// RunKafkaHandlerFunc mocks the RunKafkaHandler method.
	RunKafkaHandlerFunc func(ctx context.Context, kafkaReader portfolio.KafkaReader, lastOffset int64) error

	// calls tracks calls to the methods.
	calls struct {
		// RunKafkaHandler holds details about calls to the RunKafkaHandler method.
		RunKafkaHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// KafkaReader is the kafkaReader argument value.
			KafkaReader portfolio.KafkaReader
			// LastOffset is the lastOffset argument value.
			LastOffset int64
		}
	}
	lockRunKafkaHandler sync.RWMutex
}

// RunKafkaHandler calls RunKafkaHandlerFunc.
func (mock *PendingKafkaServiceMock) RunKafkaHandler(ctx context.Context, kafkaReader portfolio.KafkaReader, lastOffset int64) error {
	if mock.RunKafkaHandlerFunc == nil {
		panic("PendingKafkaServiceMock.RunKafkaHandlerFunc: method is nil but PendingKafkaService.RunKafkaHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		KafkaReader portfolio.KafkaReader
		LastOffset  int64
	}{
		Ctx:         ctx,
		KafkaReader: kafkaReader,
		LastOffset:  lastOffset,
	}
	mock.lockRunKafkaHandler.Lock()
	mock.calls.RunKafkaHandler = append(mock.calls.RunKafkaHandler, callInfo)
	mock.lockRunKafkaHandler.Unlock()
	return mock.RunKafkaHandlerFunc(ctx, kafkaReader, lastOffset)
}

// RunKafkaHandlerCalls gets all the calls that were made to RunKafkaHandler.
// Check the length with:
//
//	len(mockedPendingKafkaService.RunKafkaHandlerCalls())
func (mock *PendingKafkaServiceMock) RunKafkaHandlerCalls() []struct {
	Ctx         context.Context
	KafkaReader portfolio.KafkaReader
	LastOffset  int64
} {
	var calls []struct {
		Ctx         context.Context
		KafkaReader portfolio.KafkaReader
		LastOffset  int64
	}
	mock.lockRunKafkaHandler.RLock()
	calls = mock.calls.RunKafkaHandler
	mock.lockRunKafkaHandler.RUnlock()
	return calls
}
