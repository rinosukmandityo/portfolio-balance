// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/rinosukmandityo/portfolio-balance/internal/kafka/client"
	"github.com/segmentio/kafka-go"
)

// Ensure, that ClientWriterMock does implement client.ClientWriter.
// If this is not the case, regenerate this file with moq.
var _ client.ClientWriter = &ClientWriterMock{}

// ClientWriterMock is a mock implementation of client.ClientWriter.
//
//	func TestSomethingThatUsesClientWriter(t *testing.T) {
//
//		// make and configure a mocked client.ClientWriter
//		mockedClientWriter := &ClientWriterMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			WriteMessagesFunc: func(ctx context.Context, msgs ...kafka.Message) error {
//				panic("mock out the WriteMessages method")
//			},
//		}
//
//		// use mockedClientWriter in code that requires client.ClientWriter
//		// and then make assertions.
//
//	}
type ClientWriterMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// WriteMessagesFunc mocks the WriteMessages method.
	WriteMessagesFunc func(ctx context.Context, msgs ...kafka.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// WriteMessages holds details about calls to the WriteMessages method.
		WriteMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msgs is the msgs argument value.
			Msgs []kafka.Message
		}
	}
	lockClose         sync.RWMutex
	lockWriteMessages sync.RWMutex
}

// Close calls CloseFunc.
func (mock *ClientWriterMock) Close() error {
	if mock.CloseFunc == nil {
		panic("ClientWriterMock.CloseFunc: method is nil but ClientWriter.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedClientWriter.CloseCalls())
func (mock *ClientWriterMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// WriteMessages calls WriteMessagesFunc.
func (mock *ClientWriterMock) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	if mock.WriteMessagesFunc == nil {
		panic("ClientWriterMock.WriteMessagesFunc: method is nil but ClientWriter.WriteMessages was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Msgs []kafka.Message
	}{
		Ctx:  ctx,
		Msgs: msgs,
	}
	mock.lockWriteMessages.Lock()
	mock.calls.WriteMessages = append(mock.calls.WriteMessages, callInfo)
	mock.lockWriteMessages.Unlock()
	return mock.WriteMessagesFunc(ctx, msgs...)
}

// WriteMessagesCalls gets all the calls that were made to WriteMessages.
// Check the length with:
//
//	len(mockedClientWriter.WriteMessagesCalls())
func (mock *ClientWriterMock) WriteMessagesCalls() []struct {
	Ctx  context.Context
	Msgs []kafka.Message
} {
	var calls []struct {
		Ctx  context.Context
		Msgs []kafka.Message
	}
	mock.lockWriteMessages.RLock()
	calls = mock.calls.WriteMessages
	mock.lockWriteMessages.RUnlock()
	return calls
}
