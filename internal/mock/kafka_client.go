// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/rinosukmandityo/portfolio-balance/internal/kafka/client"
	"github.com/segmentio/kafka-go"
)

// Ensure, that ClientReaderMock does implement client.ClientReader.
// If this is not the case, regenerate this file with moq.
var _ client.ClientReader = &ClientReaderMock{}

// ClientReaderMock is a mock implementation of client.ClientReader.
//
//	func TestSomethingThatUsesClientReader(t *testing.T) {
//
//		// make and configure a mocked client.ClientReader
//		mockedClientReader := &ClientReaderMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			CommitMessagesFunc: func(ctx context.Context, msgs ...kafka.Message) error {
//				panic("mock out the CommitMessages method")
//			},
//			FetchMessageFunc: func(ctx context.Context) (kafka.Message, error) {
//				panic("mock out the FetchMessage method")
//			},
//		}
//
//		// use mockedClientReader in code that requires client.ClientReader
//		// and then make assertions.
//
//	}
type ClientReaderMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// CommitMessagesFunc mocks the CommitMessages method.
	CommitMessagesFunc func(ctx context.Context, msgs ...kafka.Message) error

	// FetchMessageFunc mocks the FetchMessage method.
	FetchMessageFunc func(ctx context.Context) (kafka.Message, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// CommitMessages holds details about calls to the CommitMessages method.
		CommitMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msgs is the msgs argument value.
			Msgs []kafka.Message
		}
		// FetchMessage holds details about calls to the FetchMessage method.
		FetchMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClose          sync.RWMutex
	lockCommitMessages sync.RWMutex
	lockFetchMessage   sync.RWMutex
}

// Close calls CloseFunc.
func (mock *ClientReaderMock) Close() error {
	if mock.CloseFunc == nil {
		panic("ClientReaderMock.CloseFunc: method is nil but ClientReader.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedClientReader.CloseCalls())
func (mock *ClientReaderMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// CommitMessages calls CommitMessagesFunc.
func (mock *ClientReaderMock) CommitMessages(ctx context.Context, msgs ...kafka.Message) error {
	if mock.CommitMessagesFunc == nil {
		panic("ClientReaderMock.CommitMessagesFunc: method is nil but ClientReader.CommitMessages was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Msgs []kafka.Message
	}{
		Ctx:  ctx,
		Msgs: msgs,
	}
	mock.lockCommitMessages.Lock()
	mock.calls.CommitMessages = append(mock.calls.CommitMessages, callInfo)
	mock.lockCommitMessages.Unlock()
	return mock.CommitMessagesFunc(ctx, msgs...)
}

// CommitMessagesCalls gets all the calls that were made to CommitMessages.
// Check the length with:
//
//	len(mockedClientReader.CommitMessagesCalls())
func (mock *ClientReaderMock) CommitMessagesCalls() []struct {
	Ctx  context.Context
	Msgs []kafka.Message
} {
	var calls []struct {
		Ctx  context.Context
		Msgs []kafka.Message
	}
	mock.lockCommitMessages.RLock()
	calls = mock.calls.CommitMessages
	mock.lockCommitMessages.RUnlock()
	return calls
}

// FetchMessage calls FetchMessageFunc.
func (mock *ClientReaderMock) FetchMessage(ctx context.Context) (kafka.Message, error) {
	if mock.FetchMessageFunc == nil {
		panic("ClientReaderMock.FetchMessageFunc: method is nil but ClientReader.FetchMessage was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFetchMessage.Lock()
	mock.calls.FetchMessage = append(mock.calls.FetchMessage, callInfo)
	mock.lockFetchMessage.Unlock()
	return mock.FetchMessageFunc(ctx)
}

// FetchMessageCalls gets all the calls that were made to FetchMessage.
// Check the length with:
//
//	len(mockedClientReader.FetchMessageCalls())
func (mock *ClientReaderMock) FetchMessageCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFetchMessage.RLock()
	calls = mock.calls.FetchMessage
	mock.lockFetchMessage.RUnlock()
	return calls
}
