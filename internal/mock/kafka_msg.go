// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"
	"time"

	"github.com/rinosukmandityo/portfolio-balance"
)

// Ensure, that KafkaMsgMock does implement portfolio.KafkaMsg.
// If this is not the case, regenerate this file with moq.
var _ portfolio.KafkaMsg = &KafkaMsgMock{}

// KafkaMsgMock is a mock implementation of portfolio.KafkaMsg.
//
//	func TestSomethingThatUsesKafkaMsg(t *testing.T) {
//
//		// make and configure a mocked portfolio.KafkaMsg
//		mockedKafkaMsg := &KafkaMsgMock{
//			CommitFunc: func(ctx context.Context) error {
//				panic("mock out the Commit method")
//			},
//			MsgFunc: func() []byte {
//				panic("mock out the Msg method")
//			},
//			OffsetFunc: func() int64 {
//				panic("mock out the Offset method")
//			},
//			PartitionFunc: func() int {
//				panic("mock out the Partition method")
//			},
//			TimestampFunc: func() time.Time {
//				panic("mock out the Timestamp method")
//			},
//		}
//
//		// use mockedKafkaMsg in code that requires portfolio.KafkaMsg
//		// and then make assertions.
//
//	}
type KafkaMsgMock struct {
	// CommitFunc mocks the Commit method.
	CommitFunc func(ctx context.Context) error

	// MsgFunc mocks the Msg method.
	MsgFunc func() []byte

	// OffsetFunc mocks the Offset method.
	OffsetFunc func() int64

	// PartitionFunc mocks the Partition method.
	PartitionFunc func() int

	// TimestampFunc mocks the Timestamp method.
	TimestampFunc func() time.Time

	// calls tracks calls to the methods.
	calls struct {
		// Commit holds details about calls to the Commit method.
		Commit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Msg holds details about calls to the Msg method.
		Msg []struct {
		}
		// Offset holds details about calls to the Offset method.
		Offset []struct {
		}
		// Partition holds details about calls to the Partition method.
		Partition []struct {
		}
		// Timestamp holds details about calls to the Timestamp method.
		Timestamp []struct {
		}
	}
	lockCommit    sync.RWMutex
	lockMsg       sync.RWMutex
	lockOffset    sync.RWMutex
	lockPartition sync.RWMutex
	lockTimestamp sync.RWMutex
}

// Commit calls CommitFunc.
func (mock *KafkaMsgMock) Commit(ctx context.Context) error {
	if mock.CommitFunc == nil {
		panic("KafkaMsgMock.CommitFunc: method is nil but KafkaMsg.Commit was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	return mock.CommitFunc(ctx)
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedKafkaMsg.CommitCalls())
func (mock *KafkaMsgMock) CommitCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// Msg calls MsgFunc.
func (mock *KafkaMsgMock) Msg() []byte {
	if mock.MsgFunc == nil {
		panic("KafkaMsgMock.MsgFunc: method is nil but KafkaMsg.Msg was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMsg.Lock()
	mock.calls.Msg = append(mock.calls.Msg, callInfo)
	mock.lockMsg.Unlock()
	return mock.MsgFunc()
}

// MsgCalls gets all the calls that were made to Msg.
// Check the length with:
//
//	len(mockedKafkaMsg.MsgCalls())
func (mock *KafkaMsgMock) MsgCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMsg.RLock()
	calls = mock.calls.Msg
	mock.lockMsg.RUnlock()
	return calls
}

// Offset calls OffsetFunc.
func (mock *KafkaMsgMock) Offset() int64 {
	if mock.OffsetFunc == nil {
		panic("KafkaMsgMock.OffsetFunc: method is nil but KafkaMsg.Offset was just called")
	}
	callInfo := struct {
	}{}
	mock.lockOffset.Lock()
	mock.calls.Offset = append(mock.calls.Offset, callInfo)
	mock.lockOffset.Unlock()
	return mock.OffsetFunc()
}

// OffsetCalls gets all the calls that were made to Offset.
// Check the length with:
//
//	len(mockedKafkaMsg.OffsetCalls())
func (mock *KafkaMsgMock) OffsetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockOffset.RLock()
	calls = mock.calls.Offset
	mock.lockOffset.RUnlock()
	return calls
}

// Partition calls PartitionFunc.
func (mock *KafkaMsgMock) Partition() int {
	if mock.PartitionFunc == nil {
		panic("KafkaMsgMock.PartitionFunc: method is nil but KafkaMsg.Partition was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPartition.Lock()
	mock.calls.Partition = append(mock.calls.Partition, callInfo)
	mock.lockPartition.Unlock()
	return mock.PartitionFunc()
}

// PartitionCalls gets all the calls that were made to Partition.
// Check the length with:
//
//	len(mockedKafkaMsg.PartitionCalls())
func (mock *KafkaMsgMock) PartitionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPartition.RLock()
	calls = mock.calls.Partition
	mock.lockPartition.RUnlock()
	return calls
}

// Timestamp calls TimestampFunc.
func (mock *KafkaMsgMock) Timestamp() time.Time {
	if mock.TimestampFunc == nil {
		panic("KafkaMsgMock.TimestampFunc: method is nil but KafkaMsg.Timestamp was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTimestamp.Lock()
	mock.calls.Timestamp = append(mock.calls.Timestamp, callInfo)
	mock.lockTimestamp.Unlock()
	return mock.TimestampFunc()
}

// TimestampCalls gets all the calls that were made to Timestamp.
// Check the length with:
//
//	len(mockedKafkaMsg.TimestampCalls())
func (mock *KafkaMsgMock) TimestampCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTimestamp.RLock()
	calls = mock.calls.Timestamp
	mock.lockTimestamp.RUnlock()
	return calls
}
