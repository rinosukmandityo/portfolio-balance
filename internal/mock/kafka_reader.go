// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/rinosukmandityo/portfolio-balance"
)

// Ensure, that KafkaReaderMock does implement portfolio.KafkaReader.
// If this is not the case, regenerate this file with moq.
var _ portfolio.KafkaReader = &KafkaReaderMock{}

// KafkaReaderMock is a mock implementation of portfolio.KafkaReader.
//
//	func TestSomethingThatUsesKafkaReader(t *testing.T) {
//
//		// make and configure a mocked portfolio.KafkaReader
//		mockedKafkaReader := &KafkaReaderMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			FetchMessageFunc: func(ctx context.Context) (portfolio.KafkaMsg, error) {
//				panic("mock out the FetchMessage method")
//			},
//		}
//
//		// use mockedKafkaReader in code that requires portfolio.KafkaReader
//		// and then make assertions.
//
//	}
type KafkaReaderMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// FetchMessageFunc mocks the FetchMessage method.
	FetchMessageFunc func(ctx context.Context) (portfolio.KafkaMsg, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// FetchMessage holds details about calls to the FetchMessage method.
		FetchMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClose        sync.RWMutex
	lockFetchMessage sync.RWMutex
}

// Close calls CloseFunc.
func (mock *KafkaReaderMock) Close() error {
	if mock.CloseFunc == nil {
		panic("KafkaReaderMock.CloseFunc: method is nil but KafkaReader.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedKafkaReader.CloseCalls())
func (mock *KafkaReaderMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// FetchMessage calls FetchMessageFunc.
func (mock *KafkaReaderMock) FetchMessage(ctx context.Context) (portfolio.KafkaMsg, error) {
	if mock.FetchMessageFunc == nil {
		panic("KafkaReaderMock.FetchMessageFunc: method is nil but KafkaReader.FetchMessage was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFetchMessage.Lock()
	mock.calls.FetchMessage = append(mock.calls.FetchMessage, callInfo)
	mock.lockFetchMessage.Unlock()
	return mock.FetchMessageFunc(ctx)
}

// FetchMessageCalls gets all the calls that were made to FetchMessage.
// Check the length with:
//
//	len(mockedKafkaReader.FetchMessageCalls())
func (mock *KafkaReaderMock) FetchMessageCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFetchMessage.RLock()
	calls = mock.calls.FetchMessage
	mock.lockFetchMessage.RUnlock()
	return calls
}
