// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/rinosukmandityo/portfolio-balance"
)

// Ensure, that RepositoryMock does implement portfolio.Repository.
// If this is not the case, regenerate this file with moq.
var _ portfolio.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of portfolio.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked portfolio.Repository
//		mockedRepository := &RepositoryMock{
//			InsertBulkFunc: func(ctx context.Context, data []*portfolio.DataPointPerGranularity) error {
//				panic("mock out the InsertBulk method")
//			},
//			UpsertDatapointFunc: func(ctx context.Context, data []*portfolio.DataPointPerGranularity) error {
//				panic("mock out the UpsertDatapoint method")
//			},
//		}
//
//		// use mockedRepository in code that requires portfolio.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// InsertBulkFunc mocks the InsertBulk method.
	InsertBulkFunc func(ctx context.Context, data []*portfolio.DataPointPerGranularity) error

	// UpsertDatapointFunc mocks the UpsertDatapoint method.
	UpsertDatapointFunc func(ctx context.Context, data []*portfolio.DataPointPerGranularity) error

	// calls tracks calls to the methods.
	calls struct {
		// InsertBulk holds details about calls to the InsertBulk method.
		InsertBulk []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data []*portfolio.DataPointPerGranularity
		}
		// UpsertDatapoint holds details about calls to the UpsertDatapoint method.
		UpsertDatapoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data []*portfolio.DataPointPerGranularity
		}
	}
	lockInsertBulk      sync.RWMutex
	lockUpsertDatapoint sync.RWMutex
}

// InsertBulk calls InsertBulkFunc.
func (mock *RepositoryMock) InsertBulk(ctx context.Context, data []*portfolio.DataPointPerGranularity) error {
	if mock.InsertBulkFunc == nil {
		panic("RepositoryMock.InsertBulkFunc: method is nil but Repository.InsertBulk was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data []*portfolio.DataPointPerGranularity
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockInsertBulk.Lock()
	mock.calls.InsertBulk = append(mock.calls.InsertBulk, callInfo)
	mock.lockInsertBulk.Unlock()
	return mock.InsertBulkFunc(ctx, data)
}

// InsertBulkCalls gets all the calls that were made to InsertBulk.
// Check the length with:
//
//	len(mockedRepository.InsertBulkCalls())
func (mock *RepositoryMock) InsertBulkCalls() []struct {
	Ctx  context.Context
	Data []*portfolio.DataPointPerGranularity
} {
	var calls []struct {
		Ctx  context.Context
		Data []*portfolio.DataPointPerGranularity
	}
	mock.lockInsertBulk.RLock()
	calls = mock.calls.InsertBulk
	mock.lockInsertBulk.RUnlock()
	return calls
}

// UpsertDatapoint calls UpsertDatapointFunc.
func (mock *RepositoryMock) UpsertDatapoint(ctx context.Context, data []*portfolio.DataPointPerGranularity) error {
	if mock.UpsertDatapointFunc == nil {
		panic("RepositoryMock.UpsertDatapointFunc: method is nil but Repository.UpsertDatapoint was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data []*portfolio.DataPointPerGranularity
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockUpsertDatapoint.Lock()
	mock.calls.UpsertDatapoint = append(mock.calls.UpsertDatapoint, callInfo)
	mock.lockUpsertDatapoint.Unlock()
	return mock.UpsertDatapointFunc(ctx, data)
}

// UpsertDatapointCalls gets all the calls that were made to UpsertDatapoint.
// Check the length with:
//
//	len(mockedRepository.UpsertDatapointCalls())
func (mock *RepositoryMock) UpsertDatapointCalls() []struct {
	Ctx  context.Context
	Data []*portfolio.DataPointPerGranularity
} {
	var calls []struct {
		Ctx  context.Context
		Data []*portfolio.DataPointPerGranularity
	}
	mock.lockUpsertDatapoint.RLock()
	calls = mock.calls.UpsertDatapoint
	mock.lockUpsertDatapoint.RUnlock()
	return calls
}
